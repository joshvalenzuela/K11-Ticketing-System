/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package k11finalsplf;

import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Josh
 */
public class cartUI extends javax.swing.JFrame {

    /**
     * Creates new form cartUI
     */
    private static DefaultListModel<String> listModel;
    userCore obj = new userCore();
    private static double total;
    
    
    public cartUI() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listModel = new DefaultListModel<>();
        total = 0;
        for (String i : obj.itemCart) {
            if (i.startsWith("Movie 1")) {
                double price = obj.moviePrice1;
                listModel.addElement(i + " P" + price);
                total += price;
            } else if (i.startsWith("Movie 2")) {
                double price = obj.moviePrice2;
                listModel.addElement(i + " P" + price);
                total += price;
            } else if (i.startsWith("Movie 3")) {
                double price = obj.moviePrice3;
                listModel.addElement(i + " P" + price);
                total += price;
            } else if (i.startsWith("Popcorn")) {
                double price = obj.popcornPrice;
                listModel.addElement(i + " P" + price);
                total += price;
            } else if (i.startsWith("Hotdog")) {
                double price = obj.hotdogPrice;
                listModel.addElement(i + " P" + price);
                total += price;
            } else if (i.startsWith("Coke")) {
                double price = obj.cokePrice;
                listModel.addElement(i + " P" + price);
                total += price;
            }
        }
        jList1 = new javax.swing.JList<>();
        addMovie = new javax.swing.JButton();
        addFood = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1 = new javax.swing.JList<>(listModel);
        jList1.setModel(listModel);
        jScrollPane1.setViewportView(jList1);

        addMovie.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        addMovie.setText("ADD MOVIE ");
        addMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMovieActionPerformed(evt);
            }
        });

        addFood.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        addFood.setText("ADD FOOD");
        addFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodActionPerformed(evt);
            }
        });

        checkoutButton.setText("CHECKOUT");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        totalLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        totalLabel.setText("Total: P" + total);

        removeButton.setText("REMOVE ITEM");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addMovie, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(addFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(totalLabel))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addFood, addMovie});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addFood, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addFood, addMovie});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMovieActionPerformed
        // TODO add your handling code here:
        this.dispose();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new movieSelectionUI().setVisible(true);
                
            }
            
        });
    }//GEN-LAST:event_addMovieActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        // TODO add your handling code here:
        
        if (total == 0) {
            JOptionPane.showMessageDialog(this, "Error! Your cart is empty!");
        } else {
            while (true) {
                try {
                    double userCash;
                    boolean confirmBool = false;
                    confirmBool = (0 == (JOptionPane.showConfirmDialog(this, "Would you like to checkout?")));
                    if (confirmBool) {
                        String userCashInput = JOptionPane.showInputDialog(this, "Please input cash: ");
                        if (userCashInput == null) {
                            continue;
                        } else {
                            userCash = Double.parseDouble(userCashInput);
                        }
                        if (userCash < total) {
                            JOptionPane.showMessageDialog(this, "Error! Please input sufficient cash."); 
                            continue;
                        } else {
                            double change = userCash - total;
                            try {
                                for (String i : obj.itemCart) {
                                    if (i.startsWith("Movie 1")) {
                                        obj.savetoFile("movie1.txt");
                                    } else if (i.startsWith("Movie 2")) {
                                        obj.savetoFile("movie2.txt");
                                    } else if (i.startsWith("Movie 3")) {
                                        obj.savetoFile("movie3.txt");
                                    } 

                                }
                                obj.saveReceipt(obj.itemCart, total, change, userCash);
                                java.awt.EventQueue.invokeLater(new Runnable() {
                                    public void run() {
                                        new receiptUI(userCash, total, change).setVisible(true);
                                    }
                                });
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            this.dispose();
                        }
                        break;
                    } else {
                        break;
                    } 
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Error! Please input only numeric values."); 
                }
            }
        }
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        int index = jList1.getSelectedIndex();
        
        if (index != -1) {    
            if ((obj.itemCart.get(index)).startsWith("Movie 1")) {
                String stripped = obj.itemCart.get(index).replace("Movie 1: ", "");
                for (int i = 0; i < obj.sectionA.length; i++) {
                    if (stripped.equals(obj.sectionA[i])) {
                        obj.sectionA[i] = "A" + (i + 1);
                        obj.itemCart.remove(index);
                    }
                }
            } else if ((obj.itemCart.get(index)).startsWith("Movie 2")) {
                String stripped = obj.itemCart.get(index).replace("Movie 2: ", "");
                for (int i = 0; i < obj.sectionB.length; i++) {
                    if (stripped.equals(obj.sectionB[i])) {
                        obj.sectionB[i] = "A" + (i + 1);
                        obj.itemCart.remove(index);
                    }
                }
            } else if ((obj.itemCart.get(index)).startsWith("Movie 3")) {
                String stripped = obj.itemCart.get(index).replace("Movie 3: ", "");
                for (int i = 0; i < obj.sectionC.length; i++) {
                    if (stripped.equals(obj.sectionC[i])) {
                        obj.sectionC[i] = "A" + (i + 1);
                        obj.itemCart.remove(index);
                    }
                }
            } else {
                obj.itemCart.remove(index);
            }
            
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new cartUI().setVisible(true);
                }
            });
            this.dispose();
        }
        
        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new foodSelectionUI().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_addFoodActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cartUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cartUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cartUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cartUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cartUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFood;
    private javax.swing.JButton addMovie;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
}
